<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="<%- manifest.theme_color -%>" />
  <%- helmet.meta.toString() %>
  <%- helmet.title.toString() %>
  <% if (prod === true) { %>
  <link rel="stylesheet" href="/<%- assetsManifest.bundleCss -%>">
  <script type="text/javascript">
    if ('serviceWorker' in navigator) {
      // Delay registration until after the page has loaded, to ensure that our
      // precaching requests don't degrade the first visit experience.
      // See https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/registration
      window.addEventListener('load', function() {
        // Your service-worker.js *must* be located at the top-level directory relative to your site.
        // It won't be able to control pages unless it's located at the same level or higher than them.
        // *Don't* register service worker file in, e.g., a scripts/ sub-directory!
        // See https://github.com/slightlyoff/ServiceWorker/issues/468
        navigator.serviceWorker.register('sw.js').then(function(reg) {
          // updatefound is fired if service-worker.js changes.
          reg.onupdatefound = function() {
            // The updatefound event implies that reg.installing is set; see
            // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event
            var installingWorker = reg.installing;

            installingWorker.onstatechange = function() {
              console.log('installingWorker.state', installingWorker.state, navigator.serviceWorker.controller);
              switch (installingWorker.state) {
                case 'installed':
                  if (navigator.serviceWorker.controller) {
                    // At this point, the old content will have been purged and the fresh content will
                    // have been added to the cache.
                    // It's the perfect time to display a "New content is available; please refresh."
                    // message in the page's interface.
                    console.log('New or updated content is available.');
                  } else {
                    // At this point, everything has been precached.
                    // It's the perfect time to display a "Content is cached for offline use." message.
                    console.log('Content is now available offline!');
                  }
                  break;

                case 'activated':
                  if (navigator.serviceWorker.controller) {
                    navigator.serviceWorker.controller.postMessage({ url: window.location.pathname });
                  }
                  break;

                case 'redundant':
                  console.error('The installing service worker became redundant.');
                  break;
              }
            };
          };
        }).catch(function(e) {
          console.error('Error during service worker registration:', e);
        });
      });
    }
  </script>
  <link rel="manifest" href="/manifest.json">
  <% } %>
</head>
<body class="container">
  <div id="root"><% if (!shell) { %><%- initialMarkup -%><% } %></div>
  <script>window.__INITIAL_STATE__ = <%- JSON.stringify(initialState) -%>;</script>
  <script type="text/javascript" src="/<%- assetsManifest.vendorJs -%>"></script>
  <script type="text/javascript" src="/<%- assetsManifest.bundleJs -%>"></script>
</body>
</html>